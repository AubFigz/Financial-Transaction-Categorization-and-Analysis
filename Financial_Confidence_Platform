import sqlite3
import pandas as pd
import matplotlib.pyplot as plt

class FinancialConfidencePlatform:
    """
    Financial Confidence Platform class for data analysis and insights.

    This class provides methods to connect to a SQLite database,
    retrieve transaction data, analyze the data, and generate insights.
    """

    def __init__(self, db_file):
        """
        Initialize FinancialConfidencePlatform object.

        Parameters:
        - db_file (str): Path to the SQLite database file.
        """
        self.db_file = db_file
        self.conn = None

    def connect_to_database(self):
        """Connect to the SQLite database."""
        try:
            self.conn = sqlite3.connect(self.db_file)
            print("Connected to the database successfully!")
        except sqlite3.Error as e:
            print(f"Error connecting to the database: {e}")

    def disconnect_from_database(self):
        """Disconnect from the SQLite database."""
        if self.conn:
            self.conn.close()
            print("Disconnected from the database.")

    def execute_query(self, query):
        """
        Execute SQL query on the database.

        Parameters:
        - query (str): SQL query to execute.

        Returns:
        - list of tuples: Resulting rows from the query.
        """
        try:
            cursor = self.conn.cursor()
            cursor.execute(query)
            rows = cursor.fetchall()
            return rows
        except sqlite3.Error as e:
            print(f"Error executing SQL query: {e}")
            return None

    def get_transaction_data(self):
        """Retrieve transaction data from the database."""
        query = "SELECT * FROM Transactions;"
        return self.execute_query(query)

    def analyze_transactions(self):
        """Analyze transaction data and generate insights."""
        transaction_data = self.get_transaction_data()
        if transaction_data:
            # Perform data analysis here
            df = pd.DataFrame(transaction_data, columns=['TransactionID', 'UserID', 'TransactionDate', 'Amount', 'Category', 'Description'])
            # Example analysis: Total transaction amount by category
            analysis_result = df.groupby('Category')['Amount'].sum().reset_index()
            return analysis_result
        else:
            print("No transaction data available.")
            return None

    def visualize_analysis(self, analysis_result):
        """
        Visualize analysis results using matplotlib.

        Parameters:
        - analysis_result (DataFrame): Analysis result DataFrame.
        """
        if analysis_result is not None:
            plt.figure(figsize=(10, 6))
            plt.bar(analysis_result['Category'], analysis_result['Amount'])
            plt.title("Total Transaction Amount by Category")
            plt.xlabel("Category")
            plt.ylabel("Total Amount")
            plt.xticks(rotation=45, ha='right')
            plt.tight_layout()
            plt.show()
        else:
            print("No analysis result to visualize.")

# Main program
if __name__ == "__main__":
    # Initialize FinancialConfidencePlatform object
    financial_platform = FinancialConfidencePlatform("financial_data.db")

    # Connect to the database
    financial_platform.connect_to_database()

    # Analyze transactions and generate insights
    analysis_result = financial_platform.analyze_transactions()
    if analysis_result is not None:
        print("Transaction Analysis Result:")
        print(analysis_result)

        # Visualize analysis result
        financial_platform.visualize_analysis(analysis_result)

    # Disconnect from the database
    financial_platform.disconnect_from_database()
